# -*- coding: utf-8 -*-
"""Mileage_Prediction_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DwFBdAZID5K4PxH7ajA4aFj52jy8Q3GM

*italicized text*

 Mileage prediction -Regression Analysis

Source:

This dataset was taken from the StarLib Library which is  maintained at Carneie Mellon University. The dataset was used in the 1983 American Statistical Exposition.

Data Set Information:

This dataset is slightly modified version of the dataset provide by the statLib library. In line with the use of Ross Quinlan(1993) in prdecting the attribute "autp-mpg.data-original.
"The the concern city-cycle fuel consumption in the miles per gallon, to be predicted in terms of 3 multivalued dercretes and 5 continuous attributes."

Attribute Information:
1. mpg: continous
2. cylinder: multi-valued discretes
3. displacement : continous
4. horespower: continuous
5. weight: continuous
6. acceleration: continuous
7. model year: multi-valued discrete
8. origin: multivalued discrete
9. car name: string (unique for each instance)

Import Library
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

"""Import Data"""

df = pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/MPG.csv')

df.head()

df.nunique()

"""Data Processing


"""

df.info()

df.describe()

df.corr()

"""Remove Missing Values"""

df = df.dropna()

df.info()

"""Data Visulization"""

sns.pairplot(df, x_vars = ['displacement', 'horsepower', 'weight', 'acceleration', 'mpg'],y_vars=['mpg']);

sns.regplot(x = 'displacement', y = 'mpg', data = df);

"""Define Target Variable y and Features X"""

df.columns

y = df['mpg']

y.shape

X = df[['displacement', 'horsepower', 'weight', 'acceleration']]

X.shape

X

"""Scaling Data"""

from sklearn.preprocessing import StandardScaler

ss =StandardScaler()

X = ss.fit_transform(X)

X

pd.DataFrame(X).describe()

"""After standardization Mean is Zero and the Standard Derivation is one

Train Test Split Data
"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, random_state = 2529)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""Linear Regression Model"""

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(X_train,y_train)

lr.intercept_

lr.coef_

"""Predict Test Data"""

y_pred = lr.predict(X_test)

y_pred

"""Model Accuracy"""

from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, r2_score

mean_absolute_error(y_test, y_pred)

mean_absolute_percentage_error(y_test, y_pred)

r2_score(y_test, y_pred)

"""Polynomial Regression"""

from sklearn.preprocessing import PolynomialFeatures

poly = PolynomialFeatures(degree=2, interaction_only=True, include_bias=False)

X_train2 = poly.fit_transform(X_train)

X_test2 = poly.fit_transform(X_test)

lr.fit(X_train2, y_train)

lr.intercept_

lr.coef_

y_pred_poly = lr.predict(X_test2)

"""Model Accuracy"""

from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, r2_score

mean_absolute_error(y_test, y_pred_poly)

mean_absolute_percentage_error(y_test,y_pred_poly)

r2_score(y_test,y_pred_poly)